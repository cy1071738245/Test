<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <!-- 将mapper接口和配置文件对应起来 -->
<mapper namespace="com.cy.mapper.ArticleMapper">

    <select id="getArticleList" resultType="java.util.Map">
        select a.article_id articleId, a.title articleName, a.content, a.image_url imageUrl, a.poetry_id poetryId, a.update_time updateTime,
        b.user_name userName, c.title poetryName from article a
        inner join poetry c on a.poetry_id = c.poetry_id
        left join `user` b on a.user_id = b.user_id
        <where>
            <if test="poetryId != null">
                and c.poetry_id = #{poetryId}
            </if>
            <if test="keyword != null">
                and a.title like concat('%', #{keyword}, '%') or c.title like concat('%', #{keyword}, '%')
            </if>
        </where>
        limit ${size * (page - 1)}, #{size}
    </select>

    <select id="getArticleListCount" resultType="java.lang.Integer">
        select count(*) from article a, poetry b
        where a.poetry_id = b.poetry_id
        <if test="poetryId != null">
            and b.poetry_id = #{poetryId}
        </if>
        <if test="keyword != null">
            and a.title like concat('%', #{keyword}, '%') or b.title like concat('%', #{keyword}, '%')
        </if>
    </select>

    <insert id="addArticle">
        insert into article (title, user_id, content, image_url, poetry_id, update_time)
        values (#{title}, #{userId}, #{content}, #{imageUrl}, #{poetryId}, CURTIME())
    </insert>

    <update id="editArticle">
        update article
        set title = #{title}, user_id = #{userId}, content = #{content}, image_url = #{imageUrl}, poetry_id = #{poetryId}, update_time = CURTIME()
        where article_id = #{articleId}
    </update>

    <delete id="deleteArticle">
        delete from article where article_id = #{articleId}
    </delete>

    <select id="getArticleById" resultType="java.util.Map">
        select a.article_id articleId, a.title articleName, a.content articleContent, a.image_url imageUrl, a.poetry_id poetryId, a.update_time updateTime,
        b.user_name userName, c.title poetryName, c.content poetryContent from article a
        inner join poetry c on a.poetry_id = c.poetry_id
        left join `user` b on a.user_id = b.user_id
        where a.article_id = #{articleId}
    </select>

</mapper>